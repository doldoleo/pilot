server:
   port: 8090

spring:  
   application:   
      name: config-client-github
   profiles:
      active: local
   
   cloud:
      config:
        fail-fast: true #config-server에 연결할 수 없는 경우 애플리케이션 구동에 실패
        retry: #config server에 연결 실패하거나 응답 에러가 발생하는 경우 재시도하는 정책
          initial-interval: 1000 #config server api 요청 실패 후 다음 retry 요청을 위한 internal 입니다. 단위는 ms(밀리세컨드)입니다.
          max-attempts: 5 #최대로 retry하는 횟수
          multiplier: 1.1
        request-connect-timeout: 2000 #config server 요청 시 사용하는 connection timeout 값
        request-read-timeout: 10000 #config server 요청 시 사용하는 read timeout 값입니다.
          
info:
  app:
    name: config-client-github
    description: config-client-github

# config server actuator
management:
  endpoints:
    web:
       exposure:
         include: "*" #/actuator/refresh endpoint를 노출 시켜, 클라이언트의 context refresh를 실행시키도록 합니다.context refresh가 실행되면 config server로 부터 현재 프로퍼티 정보를 받아옵니다.
                                     # - "refresh" # 위 '*'  으로 전체를 공개 해서 주석
                                     # - "bus-refresh" # 위 '*'  으로 전체를 공개 해서 주석
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: B3
      produce: B3_MULTI
    enabled: true
  zipkin:
    tracing:
       endpoint: http://192.168.0.101:30411/api/v2/spans  
       
# HTML 형식의 swagger 문서의 사용자 경로 지정
springdoc:
  api-docs:
    path: /api-docs/user # 전체 API 정보를 가져오는 REST API
  packages-to-scan: com.example.demo   #api가 정의된 package 검색경로
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8  
  swagger-ui:
    operations-sorter: method  # delete - get - patch - post - put 순으로 정렬, alpha를 사용하면 알파벳 순으로 정렬 가능
    tags-sorter: alpha # 태그를 알파벳 순으로 정렬
    groups-order: DESC # path, query, body, response 순으로 출력
    disable-swagger-default-url: true
    #path: /swagger-ui.html  # swagger-ui 접근 경로에 대한 별칭, 해당 주소로 접속해도 http://localhost:8080/swagger-ui/index.html로 리다이렉션 됨.
    doc-expansion: none  
  paths-to-match:
    - /** # swagger-ui에 표시할 api의 엔드포인트 패턴    

config-service:
   profile: 5
   region: 222
     
---
spring:
  config:
     activate:  
        on-profile: local
     import: optional:configserver:http://localhost:8888      
  cloud:
     config:
        enabled: true  #config server에서 구동시 설정가져오기 마!!!      
        uri: http://localhost:8888  #spring-cloud-starter-config 모듈을 사용하면 정의하는 값
        name: config-client-github
        profile: local
        
---
spring:
  config:
     activate:
        on-profile: dev
     import: optional:configserver:http://localhost:8888     
  cloud:
     config:
        enabled: true  #config server에서 구동시 설정가져오기 마!!!      
        uri: http://localhost:8888  #spring-cloud-starter-config 모듈을 사용하면 정의하는 값
        name: config-client-github
        profile: dev
         