server:
  port: 9000

spring:
  application:
    name: spring-cloud-gateway #MSA에서 해당 서비스를 구별할 수 있는 고유한 ID
  cloud:
    gateway:
      default-filters: # 전역 필터 설정 (모든 라우터 목록들에 대해서 해당 필터 적용)
        - name : GlobalFilter #전역 필터 클래스 이름
          args: #  필터에 전달되는 추가 인수 설정
            baseMessage : Spring Cloud Gateway GlobalFilter
            preLogger : true
            postLogger : true
      routes: #라우팅 규칙 목록 설정
        - id : payment-service
          uri:  http://payment-service.pilot # lb://SECONDSERVICE #Eureka에 등록된 서비스 이름 지정 Spring Cloud Gateway에서는 Eureka에 등록된 서비스를 검색하고, Load Balancer는 Eureka에서 처리한다.
          predicates:
            - Path=/api/v1/payment/**
            - Method=GET,POST,PUT,DELETE,OPTIONS
          filters:
            - AddRequestHeader=first-request, first-request-header2 #요청 헤더 추가 필터 적용
            - AddResponseHeader=first-response, first-response-header2 #응답 헤더 추가 필터 적용
            - CustomFilter 
        - id : user-service
          uri: http://user-service.pilot #http://localhost:8000 OR lb://USER-SERVICE
          predicates:
            - Path=/api/v1/user/**
          filters:
            - CustomFilter
        - id : feign-service
          uri: http://feign-service.pilot #http://payment-service.pilot #http://localhost:8000 OR lb://USER-SERVICE
          predicates:
            - Path=/api/v1/merge/**
          filters:
            - CustomFilter  
management:
  endpoints:
    web:
      exposure:
        include: "*"
          
  endpoint:
    gateway:
      enabled: true  # default: true     
      
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: B3
      produce: B3_MULTI
    enabled: true
  zipkin:
    tracing:
       endpoint: http://192.168.0.101:30411/api/v2/spans      

logging:
   pattern:
      level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
   level:
    zipkin2: DEBUG        